#include <stdio.h>
#include <math.h>
 
int main()
{
	float a = 0.,
		b = M_PI / 2,
		eps = 1.e-3,
		h,
		integr1 = 0.,
		integr2;
	int k,
		n = 2;
	integr2 = (b - a) * (sin(a/2) + sin(b/2)) / n;
	while (fabs(integr2 - integr1) > eps)
	{
		n *= 2;
		h = (b - a) / n;
		integr1 = integr2;
		integr2 = 0;
		for (int k = 0; k < n; ++k)
			integr2 += h * sin((a + ((k + 0.5) * h)) / 2);
	}
	printf("Rectangle rule: %2.f\n", integr2);
	integr2 = eps + 1,
		integr2 = 0.;
	n = 2;
	while (fabs(integr2 - integr1) > eps)
	{
		h = (b - a) / n;
		integr1 = integr2;
		integr2 = 0;
		for (int i = 0; i < n; ++i) 
		{
			const double x1 = a + i * h;
			const double x2 = a + (i + 1) * h;
			integr2 += 0.5 * (x2 - x1) * (sin(a/2) + sin(b/2));
		}
	}
	printf("Trapezoidal rule: %2.f\n", integr2);
	integr2 = eps + 1, 
		integr1 = 0.;
	while (fabs(integr2 - integr1) > eps)
	{
		n = 2;
		double evenSum = 0, oddSum = 0, sum = 0;
		h = (b - a) / (2 * n);
		for (int i = 1; i <= 2*n - 1; i += 2)
		{
			oddSum += sin((a + h * i) / 2);
			evenSum += sin((a + h*(i + 1)) / 2);
		}
		sum = sin(a/2) + 4*oddSum + 2*evenSum - sin(b/2);
		integr2 = integr1;
		integr1 = (h / 3) * sum;
		n *= 2;
	}
	printf("Simpson's rule: %2.f\n", integr1);
	return 0;
}
